﻿<#@ template language="C#" #>
<#@ output extension=".cs" encoding="utf-8" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.IO" #>


namespace Playground.Mindustry.Blocks
{
    public static partial class BlockData
    {
        public static Dictionary<string, Block> blocks = new();
        public static void Load()
        {
<#
var BlocksRegex = new Regex("""( new (?<type>.*)\("(?<name>.*)"\){{(.|\n)+?(^        }};))""", RegexOptions.ExplicitCapture | RegexOptions.Multiline);

var SizeRegex = new Regex("""(size ? = ?(?<size>\d*);)""");
var IngRegex = new Regex("""(requirements\(Category\..*, ?with\((?<ing>.*)(\)\);))""");

var RecipieRegex = new Regex("""(Items\.(?<item>[a-zA-Z]*), ?(?<count>\d*))""");

var str = File.ReadAllText(@"D:\JustSample\CS\Playground\Playground\Playground\bin\Debug\net8.0\blocks.java");

var matches = BlocksRegex.Matches(str);
if (matches.Count == 0)
{
    throw new Exception("Fuck this regex");
}
if (matches == null)
{
    throw new Exception("Failed to get data");
}
 
Dictionary<string, Tuple<string, string, Tuple<string, int>[], int>> blocks = new();

foreach (Match match in matches)
{
    var sizeMatch = SizeRegex.Match(match.Value);
    var ingMatch = IngRegex.Match(match.Value);

    var recMathes = RecipieRegex.Matches(ingMatch.Value);
    var ing = new List<Tuple<string, int>>();
    foreach (Match match2 in recMathes)
    {
        ing.Add(Tuple.Create(match2.Groups["item"].Value, int.Parse(match2.Groups["count"].Value)));
    }
    
    if(match.Groups["type"].Value == "GenericCrafter" && ing.Count == 0)
    {
        throw new Exception($"{match.Value}\n\n{sizeMatch.Value} {recMathes.Count}: {ingMatch.Value}");
    }

    var b = Tuple.Create(match.Groups["type"].Value, match.Groups["name"].Value, ing.ToArray(), sizeMatch.Groups["size"].Success ? int.Parse(sizeMatch.Groups["size"].Value) : 1);
    if(blocks.ContainsKey(b.Item2))
        continue;
    blocks.Add(b.Item2, b);
}

foreach (var kvp in blocks)
{
    var b = kvp.Value;
#>
                blocks.Add("<#= b.Item2 #>",new Block
                {
                    BlockName = "<#= b.Item2 #>",
                    BlockType = "<#= b.Item1 #>",
                    Size = <#= b.Item4 #>,
                    Price = new ItemPrice[] {<#
                        for(int i = 0; i < b.Item3.Length; i++)
                        {
                        #>
                     new ItemPrice("<#= b.Item3[i].Item1 #>", <#= b.Item3[i].Item2 #> ),
                        <# } #>
                    },
                });
            
<# } #>
        }




    }
}